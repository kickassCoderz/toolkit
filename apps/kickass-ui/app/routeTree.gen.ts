/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DocumentationRouteImport } from './routes/documentation/route'
import { Route as IndexImport } from './routes/index'
import { Route as ShowcaseIndexImport } from './routes/showcase/index'
import { Route as PlaygroundIndexImport } from './routes/playground/index'
import { Route as DocumentationSplatImport } from './routes/documentation/$'

// Create/Update Routes

const DocumentationRouteRoute = DocumentationRouteImport.update({
  id: '/documentation',
  path: '/documentation',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShowcaseIndexRoute = ShowcaseIndexImport.update({
  id: '/showcase/',
  path: '/showcase/',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundIndexRoute = PlaygroundIndexImport.update({
  id: '/playground/',
  path: '/playground/',
  getParentRoute: () => rootRoute,
} as any)

const DocumentationSplatRoute = DocumentationSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => DocumentationRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/documentation': {
      id: '/documentation'
      path: '/documentation'
      fullPath: '/documentation'
      preLoaderRoute: typeof DocumentationRouteImport
      parentRoute: typeof rootRoute
    }
    '/documentation/$': {
      id: '/documentation/$'
      path: '/$'
      fullPath: '/documentation/$'
      preLoaderRoute: typeof DocumentationSplatImport
      parentRoute: typeof DocumentationRouteImport
    }
    '/playground/': {
      id: '/playground/'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundIndexImport
      parentRoute: typeof rootRoute
    }
    '/showcase/': {
      id: '/showcase/'
      path: '/showcase'
      fullPath: '/showcase'
      preLoaderRoute: typeof ShowcaseIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DocumentationRouteRouteChildren {
  DocumentationSplatRoute: typeof DocumentationSplatRoute
}

const DocumentationRouteRouteChildren: DocumentationRouteRouteChildren = {
  DocumentationSplatRoute: DocumentationSplatRoute,
}

const DocumentationRouteRouteWithChildren =
  DocumentationRouteRoute._addFileChildren(DocumentationRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/documentation': typeof DocumentationRouteRouteWithChildren
  '/documentation/$': typeof DocumentationSplatRoute
  '/playground': typeof PlaygroundIndexRoute
  '/showcase': typeof ShowcaseIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/documentation': typeof DocumentationRouteRouteWithChildren
  '/documentation/$': typeof DocumentationSplatRoute
  '/playground': typeof PlaygroundIndexRoute
  '/showcase': typeof ShowcaseIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/documentation': typeof DocumentationRouteRouteWithChildren
  '/documentation/$': typeof DocumentationSplatRoute
  '/playground/': typeof PlaygroundIndexRoute
  '/showcase/': typeof ShowcaseIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/documentation'
    | '/documentation/$'
    | '/playground'
    | '/showcase'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/documentation' | '/documentation/$' | '/playground' | '/showcase'
  id:
    | '__root__'
    | '/'
    | '/documentation'
    | '/documentation/$'
    | '/playground/'
    | '/showcase/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocumentationRouteRoute: typeof DocumentationRouteRouteWithChildren
  PlaygroundIndexRoute: typeof PlaygroundIndexRoute
  ShowcaseIndexRoute: typeof ShowcaseIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocumentationRouteRoute: DocumentationRouteRouteWithChildren,
  PlaygroundIndexRoute: PlaygroundIndexRoute,
  ShowcaseIndexRoute: ShowcaseIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/documentation",
        "/playground/",
        "/showcase/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/documentation": {
      "filePath": "documentation/route.tsx",
      "children": [
        "/documentation/$"
      ]
    },
    "/documentation/$": {
      "filePath": "documentation/$.tsx",
      "parent": "/documentation"
    },
    "/playground/": {
      "filePath": "playground/index.tsx"
    },
    "/showcase/": {
      "filePath": "showcase/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
